/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package userdatamanager.aoleg.com.github.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.context.request.NativeWebRequest;
import userdatamanager.aoleg.com.github.dto.ErrorDto;
import userdatamanager.aoleg.com.github.dto.ListUserDto;
import userdatamanager.aoleg.com.github.dto.UserDto;
import jakarta.annotation.Generated;

import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-18T23:14:07.582570704+03:00[Europe/Moscow]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "User", description = "the User API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /users : Method of adding a user
     * Method for saving the user in the database
     *
     * @param userDto  (required)
     * @return Successful saving of the user (status code 200)
     *         or Internal server error (status code 515)
     */
    @Operation(
        operationId = "createUser",
        summary = "Method of adding a user",
        description = "Method for saving the user in the database",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful saving of the user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "515", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    default UserDto createUser(
        @Parameter(name = "UserDto", description = "", required = true) @Valid @RequestBody UserDto userDto
    ) {
        throw new IllegalArgumentException("Not implemented");

    }


    /**
     * DELETE /users/{id} : Method for deleting a user by ID
     * The method of deleting the user in the database
     *
     * @param id User ID (required)
     * @return Successful deletion of the user. The UserDTO model is returned in case the user decides to cancel the deletion (status code 200)
     *         or Internal server error (status code 515)
     */
    @Operation(
        operationId = "deleteUserById",
        summary = "Method for deleting a user by ID",
        description = "The method of deleting the user in the database",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful deletion of the user. The UserDTO model is returned in case the user decides to cancel the deletion", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "515", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    default UserDto deleteUserById(
        @Parameter(name = "id", description = "User ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        throw new IllegalArgumentException("Not implemented");

    }


    /**
     * GET /users/{id} : Method of getting user by ID
     *
     * @param id User ID (required)
     * @return Successful return of the user (status code 200)
     *         or Internal server error (status code 515)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Method of getting user by ID",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful return of the user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "515", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    default UserDto getUserById(
        @Parameter(name = "id", description = "User ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        throw new IllegalArgumentException("Not implemented");

    }


    /**
     * GET /users : Method of getting users
     * Method of getting users from the database
     *
     * @return Internal server error (status code 200)
     *         or Internal server error (status code 515)
     */
    @Operation(
        operationId = "getUsers",
        summary = "Method of getting users",
        description = "Method of getting users from the database",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListUserDto.class))
            }),
            @ApiResponse(responseCode = "515", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    default ListUserDto getUsers(
        
    ) {
        throw new IllegalArgumentException("Not implemented");

    }


    /**
     * PUT /users/{id} : Method of updating the user by ID
     * The method of updating the user in the database
     *
     * @param id User ID (required)
     * @param userDto  (required)
     * @return Successful update of user data (status code 200)
     *         or Internal server error (status code 515)
     */
    @Operation(
        operationId = "updateUserById",
        summary = "Method of updating the user by ID",
        description = "The method of updating the user in the database",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful update of user data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "515", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    
    default UserDto updateUserById(
        @Parameter(name = "id", description = "User ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "UserDto", description = "", required = true) @Valid @RequestBody UserDto userDto
    ) {
        throw new IllegalArgumentException("Not implemented");

    }

}
